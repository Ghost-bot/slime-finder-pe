{"version":3,"sources":["webpack:///slime-finder.bundle.js","webpack:///./lib/point.ts","webpack:///./scss/app.scss?074b","webpack:///./app/model/atlas.ts","webpack:///./app/model/coords.ts","webpack:///./app/view/atlas.ts","webpack:///./app/view/coords.ts","webpack:///./scss/app.scss","webpack:///./scss/atlas.scss","webpack:///./scss/atlas.scss?8ac1","webpack:///./app/slime-finder.ts","webpack:///./lib/umul32.ts","webpack:///./lib/chunk.ts"],"names":["webpackJsonp","1","module","exports","__webpack_require__","Object","defineProperty","value","Point","x","z","this","prototype","offset","round","Math","distance","p1","sqrt","pow","default","10","content","i","locals","11","Bacon","AtlasModel","coords","initialScale","centerChanges","changes","center","prop","scaleChanges","Bus","scale","scan","s0","f","skipDuplicates","12","_","CoordsModel","initialCoords","p0","isEqual","13","$","Hammer","chunk_1","point_1","AtlasView","atlas","_this","canvas","get","scaleSlider","getSize","w","window","width","h","height","size","asEventStream","throttle","map","merge","once","combineAsArray","onValues","c","sc","sz","floor","redraw","onValue","String","sliderScale","e","Number","plug","wheelScale","Manager","domEvents","recognizers","Pan","Pinch","doAction","debounceImmediate","min","max","step","originalEvent","deltaY","pinchStart","pinchMove","pinchEnd","pinch","pinchScale","withStateMachine","ev","hasValue","_a","s","jqEvent","domEvent","hmEvent","gesture","type","ds","s1","s1q","s1qr","Next","panStart","panMove","panEnd","pan","c0","ax","az","dx","deltaX","dz","c1","ctx","getContext","clearRect","fillStyle","fill","topLeft_1","bottomRight_1","isPointVisible_1","p","isChunkVisible","origin","worldToAtlas","strokeStyle","lineWidth","d","strokeRect","isSlimy","fillRect","beginPath","arc","PI","stroke","14","CoordsView","val","chunk","text","fadeIn","fadeOut","20","undefined","push","21","44","45","atlas_1","coords_1","atlas_2","coords_2","m","location","hash","match","localStorage","getItem","coordsModel","atlasModel","history","replaceState","setItem","46","umul32_lo","a","b","a00","a16","b00","b16","c00","c16","umul32_hi","c32","c48","8","LRU","MersenneTwister","umul32_1","cache","Chunk","o","k","_chunk","_Chunk","set","enumerable","configurable","_isSlimy","x_uint","z_uint","seed","mt","n","random_int","hi","hi_shift3","res"],"mappings":"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","file":"slime-finder.bundle.js","sourcesContent":["webpackJsonp([0],{\n\n/***/ 1:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Point = (function () {\n    function Point(x, z) {\n        this.x = x;\n        this.z = z;\n    }\n    Point.prototype.offset = function (x, z) {\n        return new Point(this.x + x, this.z + z);\n    };\n    Point.prototype.round = function () {\n        return new Point(Math.round(this.x), Math.round(this.z));\n    };\n    Point.prototype.distance = function (p1) {\n        return Math.sqrt(Math.pow(p1.x - this.x, 2) + Math.pow(p1.z - this.z, 2));\n    };\n    return Point;\n}());\nexports.default = Point;\n\n\n/***/ }),\n\n/***/ 10:\n/***/ (function(module, exports, __webpack_require__) {\n\n// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(20);\nif(typeof content === 'string') content = [[module.i, content, '']];\n// add the styles to the DOM\nvar update = __webpack_require__(4)(content, {});\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(false) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!../node_modules/css-loader/index.js?minimize!../node_modules/sass-loader/lib/loader.js!./app.scss\", function() {\n\t\t\tvar newContent = require(\"!!../node_modules/css-loader/index.js?minimize!../node_modules/sass-loader/lib/loader.js!./app.scss\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n/***/ }),\n\n/***/ 11:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Bacon = __webpack_require__(3);\nvar AtlasModel = (function () {\n    function AtlasModel(coords, initialScale) {\n        /* The center of the atlas is determined by the value of\n         * coords.prop property.\n         */\n        this.centerChanges = coords.changes;\n        this.center = coords.prop;\n        /* The scale of atlas is determined by the scaleChanged bus.\n         */\n        this.scaleChanges = new Bacon.Bus();\n        this.scale = this.scaleChanges.scan(initialScale, function (s0, f) {\n            return f(s0);\n        }).skipDuplicates();\n    }\n    return AtlasModel;\n}());\nexports.default = AtlasModel;\n\n\n/***/ }),\n\n/***/ 12:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar _ = __webpack_require__(47);\nvar Bacon = __webpack_require__(3);\nvar CoordsModel = (function () {\n    function CoordsModel(initialCoords) {\n        this.changes = new Bacon.Bus();\n        this.prop = this.changes.scan(initialCoords, function (p0, f) {\n            return f(p0);\n        }).skipDuplicates(_.isEqual);\n    }\n    return CoordsModel;\n}());\nexports.default = CoordsModel;\n\n\n/***/ }),\n\n/***/ 13:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__webpack_require__(44);\nvar $ = __webpack_require__(0);\nvar Bacon = __webpack_require__(3);\nvar Hammer = __webpack_require__(23);\nvar chunk_1 = __webpack_require__(8);\nvar point_1 = __webpack_require__(1);\nvar AtlasView = (function () {\n    function AtlasView(atlas) {\n        var _this = this;\n        /* The center of the atlas is determined by the value of\n         * atlas.center property. The same goes for the scale.\n         */\n        this.center = atlas.center;\n        this.scale = atlas.scale;\n        /* Resize the canvas and the scale slider according to its\n         * container.\n         */\n        this.canvas = $('.atlas-container canvas.atlas').get(0);\n        this.scaleSlider = $('.atlas-container input.atlas-scale').get(0);\n        /* When the size of window changes the canvas should be\n         * resized accordingly.\n         */\n        var getSize = function () {\n            return { w: $(window).width(), h: $(window).height() };\n        };\n        var size = $(window).asEventStream('resize')\n            .throttle(50).map(getSize)\n            .merge(Bacon.once(getSize()));\n        /* The content of atlas is determined by the center, scale,\n         * and size. Redraw it whenever either of them changes.\n         */\n        Bacon.combineAsArray(this.center, this.scale, size).onValues(function (c, sc, sz) {\n            _this.canvas.width = sz.w;\n            _this.canvas.height = Math.floor(sz.h * (50 / 100));\n            /* And recalculate the height of the scale slider. I\n             * know this should be done solely in the style sheet\n             * but I can't find a way to do it. I'm a CSS noob. */\n            $(_this.scaleSlider).height(Math.floor($(_this.canvas).height() * (30 / 100)));\n            _this.redraw(c, sc);\n        });\n        /* The current value of the scale slider should be updated\n         * whenever the scale changes.\n         */\n        this.scale.onValue(function (sc) {\n            _this.scaleSlider.value = String(sc);\n        });\n        /* And the scale should be updated whenever the scale slider\n         * changes.\n         */\n        var sliderScale = $(this.scaleSlider)\n            .asEventStream('input')\n            .map(function (e) {\n            return function () { return Number(_this.scaleSlider.value); };\n        });\n        atlas.scaleChanges.plug(sliderScale);\n        /* Configurations for mouse and touch devices.\n         */\n        var hm = new Hammer.Manager(this.canvas, {\n            domEvents: true,\n            recognizers: [\n                [Hammer.Pan],\n                [Hammer.Pinch]\n            ]\n        });\n        /* Users can pinch or use their mouse wheel to change the scale. */\n        var wheelScale = $(this.canvas)\n            .asEventStream('wheel')\n            .doAction('.preventDefault')\n            .debounceImmediate(10)\n            .map(function (e) {\n            var min = Number(_this.scaleSlider.min);\n            var max = Number(_this.scaleSlider.max);\n            var step = Number(_this.scaleSlider.step);\n            return function (s0) {\n                if (e.originalEvent.deltaY > 0) {\n                    return Math.min(s0 + step, max);\n                }\n                else {\n                    return Math.max(s0 - step, min);\n                }\n            };\n        });\n        atlas.scaleChanges.plug(wheelScale);\n        var pinchStart = $(this.canvas).asEventStream('pinchstart').doAction('.preventDefault');\n        var pinchMove = $(this.canvas).asEventStream('pinch').doAction('.preventDefault').debounceImmediate(50);\n        var pinchEnd = $(this.canvas).asEventStream('pinchend pinchcancel').doAction('.preventDefault');\n        var pinch = pinchStart.merge(pinchMove).merge(pinchEnd);\n        var pinchScale = Bacon.combineAsArray(this.scale, pinch)\n            .withStateMachine(null, function (s0, ev) {\n            if (ev.hasValue()) {\n                var _a = ev.value(), s = _a[0], jqEvent = _a[1];\n                var domEvent = jqEvent.originalEvent;\n                var hmEvent = domEvent.gesture;\n                switch (domEvent.type) {\n                    case 'pinchstart':\n                        return [s, []];\n                    case 'pinch':\n                        if (s0) {\n                            var min = Number(_this.scaleSlider.min);\n                            var max = Number(_this.scaleSlider.max);\n                            var step = Number(_this.scaleSlider.step);\n                            var ds = hmEvent.scale;\n                            var s1 = s0 * ds;\n                            var s1q = Math.round(s1 * (1 / step)) / (1 / step); // quantized\n                            var s1qr = Math.min(Math.max(s1q, min), max); // restricted\n                            return [s0, [new Bacon.Next(s1qr)]];\n                        }\n                }\n            }\n            return [null, []];\n        })\n            .map(function (s) {\n            return function () { return s; };\n        });\n        atlas.scaleChanges.plug(pinchScale);\n        /* Users can drag the atlas to scroll it. */\n        var panStart = $(this.canvas).asEventStream('panstart').doAction('.preventDefault');\n        var panMove = $(this.canvas).asEventStream('pan').doAction('.preventDefault').debounceImmediate(10);\n        var panEnd = $(this.canvas).asEventStream('panend pancancel').doAction('.preventDefault');\n        var pan = panStart.merge(panMove).merge(panEnd);\n        var centerChanges = Bacon.combineAsArray(this.scale, this.center, pan)\n            .withStateMachine(null, function (c0, ev) {\n            if (ev.hasValue()) {\n                var _a = ev.value(), scale = _a[0], c = _a[1], jqEvent = _a[2];\n                var domEvent = jqEvent.originalEvent;\n                var hmEvent = domEvent.gesture;\n                switch (domEvent.type) {\n                    case 'panstart':\n                        return [c, []];\n                    case 'pan':\n                        if (c0) {\n                            var ax = _this.canvas.width / $(_this.canvas).width();\n                            var az = _this.canvas.height / $(_this.canvas).height();\n                            var dx = -hmEvent.deltaX * ax / scale;\n                            var dz = -hmEvent.deltaY * az / scale;\n                            var c1 = c0.offset(dx, dz).round();\n                            return [c0, [new Bacon.Next(c1)]];\n                        }\n                }\n            }\n            return [null, []];\n        })\n            .map(function (c) {\n            return function () { return c; };\n        });\n        atlas.centerChanges.plug(centerChanges);\n    }\n    AtlasView.prototype.redraw = function (center, scale) {\n        var ctx = this.canvas.getContext(\"2d\");\n        if (ctx) {\n            /* First we need to clear the entire canvas.\n             */\n            ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n            ctx.fillStyle = 'rgba(0, 0, 0, 0)';\n            ctx.fill();\n            /* For each chunk visible from the atlas we draw a rectangle\n             * for it.\n             */\n            var topLeft_1 = new point_1.default(center.x - (this.canvas.width / 2) / scale, center.z - (this.canvas.height / 2) / scale);\n            var bottomRight_1 = new point_1.default(topLeft_1.x + this.canvas.width / scale, topLeft_1.z + this.canvas.height / scale);\n            /* A chunk is visible if any of its four corners is\n             * visible.\n             */\n            var isPointVisible_1 = function (p) {\n                return p.x >= topLeft_1.x && p.z >= topLeft_1.z\n                    && p.x < bottomRight_1.x && p.z < bottomRight_1.z;\n            };\n            var isChunkVisible = function (c) {\n                return isPointVisible_1(c.origin)\n                    || isPointVisible_1(c.origin.offset(16, 0))\n                    || isPointVisible_1(c.origin.offset(0, 16))\n                    || isPointVisible_1(c.origin.offset(16, 16));\n            };\n            var worldToAtlas = function (p) {\n                return new point_1.default((p.x - topLeft_1.x) * scale, (p.z - topLeft_1.z) * scale);\n            };\n            ctx.strokeStyle = 'rgba(0, 0, 0, 0.8)';\n            ctx.fillStyle = 'rgba(127, 255, 0, 0.4)';\n            ctx.lineWidth = 1.0;\n            for (var c = new chunk_1.default(topLeft_1); isChunkVisible(c); c = c.offset(0, 1)) {\n                for (var d = c; isChunkVisible(d); d = d.offset(1, 0)) {\n                    var origin = worldToAtlas(d.origin);\n                    ctx.strokeRect(Math.floor(origin.x), Math.floor(origin.z), 16 * scale, 16 * scale);\n                    if (d.isSlimy) {\n                        ctx.fillRect(Math.floor(origin.x), Math.floor(origin.z), 16 * scale, 16 * scale);\n                    }\n                }\n            }\n            /* Draw a small circle at the center of atlas.\n             */\n            ctx.strokeStyle = 'rgba(255, 0, 0, 0.4)';\n            ctx.lineWidth = 3.0;\n            ctx.beginPath();\n            ctx.arc(Math.floor(worldToAtlas(center).x), Math.floor(worldToAtlas(center).z), 4.0, 0, 2 * Math.PI);\n            ctx.stroke();\n        }\n    };\n    return AtlasView;\n}());\nexports.default = AtlasView;\n\n\n/***/ }),\n\n/***/ 14:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar $ = __webpack_require__(0);\nvar point_1 = __webpack_require__(1);\nvar chunk_1 = __webpack_require__(8);\nvar CoordsView = (function () {\n    function CoordsView(coords) {\n        /* Whenever users directly change the value of input forms its\n         * change should be propagated to the coords.changed bus.\n         */\n        this.changes = $('#position-x, #position-z').asEventStream('input').map(function () {\n            return function () { return new point_1.default(Number($('#position-x').val()), Number($('#position-z').val())); };\n        });\n        coords.changes.plug(this.changes);\n        /* The value of coords.prop property should be shown in the\n         * input forms.\n         */\n        coords.prop.onValue(function (p) {\n            $('#position-x').val(p.x);\n            $('#position-z').val(p.z);\n        });\n        /* And the chunk position on the screen should also depend on\n         * the coords.prop property.\n         */\n        this.chunk = coords.prop.map(function (p) {\n            return new chunk_1.default(p);\n        });\n        this.chunk.onValue(function (c) {\n            $('#chunk-from-x').text(c.origin.x);\n            $('#chunk-from-z').text(c.origin.z);\n            $('#chunk-to-x').text(c.origin.x + 15);\n            $('#chunk-to-z').text(c.origin.z + 15);\n            if (c.isSlimy) {\n                $('#chunk-is-slimy').fadeIn(50);\n            }\n            else {\n                $('#chunk-is-slimy').fadeOut(50);\n            }\n        });\n    }\n    return CoordsView;\n}());\nexports.default = CoordsView;\n\n\n/***/ }),\n\n/***/ 20:\n/***/ (function(module, exports, __webpack_require__) {\n\nexports = module.exports = __webpack_require__(2)(undefined);\n// imports\n\n\n// module\nexports.push([module.i, \"h1{padding:0 0 0 1em}input[type=range][orient=vertical]{writing-mode:bt-lr;-webkit-appearance:slider-vertical}\", \"\"]);\n\n// exports\n\n\n/***/ }),\n\n/***/ 21:\n/***/ (function(module, exports, __webpack_require__) {\n\nexports = module.exports = __webpack_require__(2)(undefined);\n// imports\n\n\n// module\nexports.push([module.i, \".atlas-container{position:relative}.atlas-container .atlas-scale-container{position:absolute;padding:0 5px;margin:1em}.atlas-container .atlas-scale-container input.atlas-scale{width:8px;height:125px;max-height:80%;margin:.2em auto;-webkit-transform:rotateX(180deg);-moz-transform:rotateX(180deg);-ms-transform:rotateX(180deg);-o-transform:rotateX(180deg);transform:rotateX(180deg)}.atlas-container canvas.atlas{width:100%;height:auto;cursor:move}\", \"\"]);\n\n// exports\n\n\n/***/ }),\n\n/***/ 44:\n/***/ (function(module, exports, __webpack_require__) {\n\n// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(21);\nif(typeof content === 'string') content = [[module.i, content, '']];\n// add the styles to the DOM\nvar update = __webpack_require__(4)(content, {});\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(false) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!../node_modules/css-loader/index.js?minimize!../node_modules/sass-loader/lib/loader.js!./atlas.scss\", function() {\n\t\t\tvar newContent = require(\"!!../node_modules/css-loader/index.js?minimize!../node_modules/sass-loader/lib/loader.js!./atlas.scss\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n/***/ }),\n\n/***/ 45:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__webpack_require__(9);\n__webpack_require__(10);\nvar atlas_1 = __webpack_require__(11);\nvar coords_1 = __webpack_require__(12);\nvar atlas_2 = __webpack_require__(13);\nvar coords_2 = __webpack_require__(14);\nvar point_1 = __webpack_require__(1);\nvar $ = __webpack_require__(0);\n$(function () {\n    /* If the URI hash contains coordinates, we use it as the initial\n     * value.\n     */\n    var initialCoords = (function () {\n        var m = window.location.hash.match(/^#([-0-9.]+),([-0-9.]+)$/);\n        if (m) {\n            return new point_1.default(Number(m[1]), Number(m[2]));\n        }\n        else {\n            return new point_1.default(0, 0);\n        }\n    })();\n    /* If the localStorage contains scale, we use it as the initial\n     * value.\n     */\n    var initialScale = (function () {\n        var sc = localStorage.getItem('atlas.scale');\n        return sc == null ? 4.0 : Number(sc);\n    })();\n    var coordsModel = new coords_1.default(initialCoords);\n    var coordsView = new coords_2.default(coordsModel);\n    var atlasModel = new atlas_1.default(coordsModel, initialScale);\n    var atlasView = new atlas_2.default(atlasModel);\n    /* Changes in coordsModel.prop updates the URI hash.\n     */\n    coordsModel.prop.onValue(function (p) {\n        window.history.replaceState('', '', \"#\" + p.x + \",\" + p.z);\n    });\n    /* Changes in atlasModel.scale updates the localStorage.\n     */\n    atlasModel.scale.onValue(function (sc) {\n        localStorage.setItem('atlas.scale', String(sc));\n    });\n});\n\n\n/***/ }),\n\n/***/ 46:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/* Lower 32-bits of multiplication of two uint32 values a * b.\n */\nfunction umul32_lo(a, b) {\n    var a00 = a & 0xFFFF;\n    var a16 = a >>> 16;\n    var b00 = b & 0xFFFF;\n    var b16 = b >>> 16;\n    var c00 = a00 * b00;\n    var c16 = c00 >>> 16;\n    c16 += a16 * b00;\n    c16 &= 0xFFFF;\n    c16 += a00 * b16;\n    var lo = c00 & 0xFFFF;\n    var hi = c16 & 0xFFFF;\n    return ((hi << 16) | lo) >>> 0;\n}\nexports.umul32_lo = umul32_lo;\n/* Higher 32-bits of multiplication of two uint32 values a * b.\n */\nfunction umul32_hi(a, b) {\n    var a00 = a & 0xFFFF;\n    var a16 = a >>> 16;\n    var b00 = b & 0xFFFF;\n    var b16 = b >>> 16;\n    var c00 = a00 * b00;\n    var c16 = c00 >>> 16;\n    c16 += a00 * b16;\n    var c32 = c16 >>> 16;\n    c16 &= 0xFFFF;\n    c16 += a16 * b00;\n    c32 += c16 >>> 16;\n    var c48 = c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a16 * b16;\n    c48 += c32 >>> 16;\n    var lo = c32 & 0xFFFF;\n    var hi = c48 & 0xFFFF;\n    return ((hi << 16) | lo) >>> 0;\n}\nexports.umul32_hi = umul32_hi;\n\n\n/***/ }),\n\n/***/ 8:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar LRU = __webpack_require__(38);\nvar MersenneTwister = __webpack_require__(39);\nvar point_1 = __webpack_require__(1);\nvar umul32_1 = __webpack_require__(46);\n/* Cache of the actual chunk objects.\n */\nvar cache = LRU(5000);\nvar Chunk = (function () {\n    /* Construct a Chunk object which contains the given point. */\n    function Chunk(origin) {\n        var o = new point_1.default(Math.floor(origin.x / 16) * 16, Math.floor(origin.z / 16) * 16);\n        var k = o.x + \",\" + o.z;\n        var c = cache.get(k);\n        if (c) {\n            this._chunk = c;\n        }\n        else {\n            this._chunk = new _Chunk(o);\n            cache.set(k, this._chunk);\n        }\n    }\n    Object.defineProperty(Chunk.prototype, \"origin\", {\n        /* Origin of the chunk (normalized, i.e. always multiple of 16 */\n        get: function () {\n            return this._chunk.origin;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Chunk.prototype, \"isSlimy\", {\n        /* Return true if it is a slime chunk. */\n        get: function () {\n            return this._chunk.isSlimy;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /* Return a new chunk offset by given number of chunks */\n    Chunk.prototype.offset = function (x, z) {\n        return new Chunk(new point_1.default(this.origin.x + x * 16, this.origin.z + z * 16));\n    };\n    return Chunk;\n}());\nexports.default = Chunk;\nvar _Chunk = (function () {\n    /* Construct a Chunk object which contains the given point. */\n    function _Chunk(origin) {\n        this.origin = origin;\n        this._isSlimy = null;\n    }\n    Object.defineProperty(_Chunk.prototype, \"isSlimy\", {\n        /* Return true if it is a slime chunk. */\n        get: function () {\n            /*! MCPE slime-chunk checker; reverse engineered by @protolambda and @jocopa3\n             * Ported by PHO from Java code:\n             *   https://gist.github.com/protolambda/00b85bf34a75fd8176342b1ad28bfccc\n             */\n            if (this._isSlimy == null) {\n                var x_uint = (this.origin.x / 16) >>> 0;\n                var z_uint = (this.origin.z / 16) >>> 0;\n                var seed = umul32_1.umul32_lo(x_uint, 0x1f1f1f1f) ^ z_uint;\n                var mt = new MersenneTwister(seed);\n                var n = mt.random_int();\n                var m = 0xcccccccd;\n                var hi = umul32_1.umul32_hi(n, m);\n                var hi_shift3 = hi >>> 3;\n                var res = ((((hi_shift3 + (hi_shift3 * 4)) & 0xffffffff) * 2) & 0xffffffff) >>> 0;\n                this._isSlimy = (n == res);\n            }\n            return this._isSlimy;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return _Chunk;\n}());\n\n\n/***/ })\n\n},[45]);\n\n\n// WEBPACK FOOTER //\n// slime-finder.bundle.js","export default class Point {\n    readonly x: number;\n    readonly z: number;\n\n    constructor(x: number, z: number) {\n        this.x = x;\n        this.z = z;\n    }\n\n    offset(x: number, z: number): Point {\n        return new Point(this.x + x, this.z + z);\n    }\n\n    round(): Point {\n        return new Point(Math.round(this.x), Math.round(this.z));\n    }\n\n    distance(p1: Point): number {\n        return Math.sqrt(Math.pow(p1.x - this.x, 2) + Math.pow(p1.z - this.z, 2));\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./lib/point.ts","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../node_modules/css-loader/index.js?minimize!../node_modules/sass-loader/lib/loader.js!./app.scss\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// add the styles to the DOM\nvar update = require(\"!../node_modules/style-loader/addStyles.js\")(content, {});\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!../node_modules/css-loader/index.js?minimize!../node_modules/sass-loader/lib/loader.js!./app.scss\", function() {\n\t\t\tvar newContent = require(\"!!../node_modules/css-loader/index.js?minimize!../node_modules/sass-loader/lib/loader.js!./app.scss\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./scss/app.scss\n// module id = 10\n// module chunks = 0","import Bacon = require('baconjs');\nimport CoordsModel from '../model/coords';\nimport Point from 'slime-finder/point';\n\nexport default class AtlasModel {\n    /* The center of the atlas in the world coords */\n    readonly centerChanges: Bacon.Bus<any, (p: Point) => Point>;\n    readonly center: Bacon.Property<any, Point>;\n\n    /* How the world coords are scaled to the local coords,\n     * i.e. pixels */\n    readonly scaleChanges: Bacon.Bus<any, (s: number) => number>;\n    readonly scale: Bacon.Property<any, number>;\n\n    constructor(coords: CoordsModel, initialScale: number) {\n        /* The center of the atlas is determined by the value of\n         * coords.prop property.\n         */\n        this.centerChanges = coords.changes;\n        this.center        = coords.prop;\n\n        /* The scale of atlas is determined by the scaleChanged bus.\n         */\n        this.scaleChanges = new Bacon.Bus<any, (s: number) => number>();\n        this.scale        = this.scaleChanges.scan(initialScale, (s0, f) => {\n            return f(s0);\n        }).skipDuplicates();\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./app/model/atlas.ts","import _ = require('underscore');\nimport Bacon = require('baconjs');\nimport Point from 'slime-finder/point';\n\nexport default class CoordsModel {\n    readonly changes: Bacon.Bus<any, (p: Point) => Point>;\n    readonly prop: Bacon.Property<any, Point>;\n\n    constructor(initialCoords: Point) {\n        this.changes = new Bacon.Bus<any, (p: Point) => Point>();\n        this.prop    = this.changes.scan(initialCoords, (p0, f) => {\n            return f(p0);\n        }).skipDuplicates(_.isEqual);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./app/model/coords.ts","import '../../scss/atlas.scss';\nimport $      = require('jquery');\nimport Bacon  = require('baconjs');\nimport Hammer = require('hammerjs');\nimport AtlasModel  from '../model/atlas';\nimport CoordsModel from '../model/coords';\nimport Chunk       from 'slime-finder/chunk';\nimport Point       from 'slime-finder/point';\n\nexport default class AtlasView {\n    /* The center of the atlas in the world coords */\n    protected readonly center: Bacon.Observable<any, Point>;\n\n    /* How the world coords are scaled to the local coords,\n     * i.e. pixels */\n    protected readonly scale: Bacon.Observable<any, number>;\n\n    /* The canvas to render our atlas. */\n    protected readonly canvas: HTMLCanvasElement;\n\n    /* The atlas scale slider is so tightly related to the atlas so\n     * we don't have a separate view for it. */\n    protected readonly scaleSlider: HTMLInputElement;\n\n    protected redraw(center: Point, scale: number): void {\n        const ctx = this.canvas.getContext(\"2d\");\n\n        if (ctx) {\n            /* First we need to clear the entire canvas.\n             */\n            ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n            ctx.fillStyle = 'rgba(0, 0, 0, 0)';\n            ctx.fill();\n\n            /* For each chunk visible from the atlas we draw a rectangle\n             * for it.\n             */\n            const topLeft = new Point(\n                center.x - (this.canvas.width  / 2) / scale,\n                center.z - (this.canvas.height / 2) / scale);\n            const bottomRight = new Point(\n                topLeft.x + this.canvas.width  / scale,\n                topLeft.z + this.canvas.height / scale);\n\n            /* A chunk is visible if any of its four corners is\n             * visible.\n             */\n            const isPointVisible = (p: Point): boolean => {\n                return p.x >= topLeft.x     && p.z >= topLeft.z\n                    && p.x <  bottomRight.x && p.z <  bottomRight.z;\n            };\n            const isChunkVisible = (c: Chunk): boolean => {\n                return isPointVisible(c.origin)\n                    || isPointVisible(c.origin.offset(16,  0))\n                    || isPointVisible(c.origin.offset( 0, 16))\n                    || isPointVisible(c.origin.offset(16, 16));\n            };\n            const worldToAtlas = (p: Point): Point => {\n                return new Point(\n                    (p.x - topLeft.x) * scale,\n                    (p.z - topLeft.z) * scale);\n            };\n            ctx.strokeStyle = 'rgba(0, 0, 0, 0.8)';\n            ctx.fillStyle   = 'rgba(127, 255, 0, 0.4)';\n            ctx.lineWidth   = 1.0;\n            for (let c = new Chunk(topLeft); isChunkVisible(c); c = c.offset(0, 1)) {\n                for (let d = c; isChunkVisible(d); d = d.offset(1, 0)) {\n                    const origin = worldToAtlas(d.origin);\n                    ctx.strokeRect(\n                        Math.floor(origin.x), Math.floor(origin.z), 16 * scale, 16 * scale);\n                    if (d.isSlimy) {\n                        ctx.fillRect(\n                            Math.floor(origin.x), Math.floor(origin.z), 16 * scale, 16 * scale);\n                    }\n                }\n            }\n\n            /* Draw a small circle at the center of atlas.\n             */\n            ctx.strokeStyle = 'rgba(255, 0, 0, 0.4)';\n            ctx.lineWidth   = 3.0;\n            ctx.beginPath();\n            ctx.arc(\n                Math.floor(worldToAtlas(center).x), Math.floor(worldToAtlas(center).z),\n                4.0, 0, 2 * Math.PI);\n            ctx.stroke();\n        }\n    }\n\n    constructor(atlas: AtlasModel) {\n        /* The center of the atlas is determined by the value of\n         * atlas.center property. The same goes for the scale.\n         */\n        this.center = atlas.center;\n        this.scale  = atlas.scale;\n\n        /* Resize the canvas and the scale slider according to its\n         * container.\n         */\n        this.canvas      = <HTMLCanvasElement>$('.atlas-container canvas.atlas').get(0);\n        this.scaleSlider = <HTMLInputElement>$('.atlas-container input.atlas-scale').get(0);\n\n        /* When the size of window changes the canvas should be\n         * resized accordingly.\n         */\n        let getSize = () => {\n            return {w: $(window).width(), h: $(window).height()};\n        };\n        let size = $(window).asEventStream('resize')\n            .throttle(50).map(getSize)\n            .merge(Bacon.once(getSize()));\n\n        /* The content of atlas is determined by the center, scale,\n         * and size. Redraw it whenever either of them changes.\n         */\n        Bacon.combineAsArray<any, any>(this.center, this.scale, size).onValues(\n            (c, sc, sz) => {\n                this.canvas.width  = sz.w;\n                this.canvas.height = Math.floor(sz.h * (50 / 100));\n\n                /* And recalculate the height of the scale slider. I\n                 * know this should be done solely in the style sheet\n                 * but I can't find a way to do it. I'm a CSS noob. */\n                $(this.scaleSlider).height(\n                    Math.floor($(this.canvas).height() * (30 / 100)));\n\n                this.redraw(c, sc);\n            });\n\n        /* The current value of the scale slider should be updated\n         * whenever the scale changes.\n         */\n        this.scale.onValue((sc) => {\n            this.scaleSlider.value = String(sc);\n        });\n\n        /* And the scale should be updated whenever the scale slider\n         * changes.\n         */\n        let sliderScale = $(this.scaleSlider)\n            .asEventStream('input')\n            .map((e) => {\n                return () => Number(this.scaleSlider.value);\n            });\n        atlas.scaleChanges.plug(sliderScale);\n\n        /* Configurations for mouse and touch devices.\n         */\n        let hm = new Hammer.Manager(this.canvas, {\n            domEvents: true,\n            recognizers: [\n                [Hammer.Pan],\n                [Hammer.Pinch]\n            ]\n        });\n\n        /* Users can pinch or use their mouse wheel to change the scale. */\n        let wheelScale = $(this.canvas)\n            .asEventStream('wheel')\n            .doAction('.preventDefault')\n            .debounceImmediate(10)\n            .map((e) => {\n                const min  = Number(this.scaleSlider.min);\n                const max  = Number(this.scaleSlider.max);\n                const step = Number(this.scaleSlider.step);\n                return (s0) => {\n                    if ((<WheelEvent>e.originalEvent).deltaY > 0) {\n                        return Math.min(s0 + step, max);\n                    }\n                    else {\n                        return Math.max(s0 - step, min);\n                    }\n                };\n            });\n        atlas.scaleChanges.plug(wheelScale);\n\n        let pinchStart = $(this.canvas).asEventStream('pinchstart').doAction('.preventDefault');\n        let pinchMove  = $(this.canvas).asEventStream('pinch').doAction('.preventDefault').debounceImmediate(50);\n        let pinchEnd   = $(this.canvas).asEventStream('pinchend pinchcancel').doAction('.preventDefault');\n        let pinch      = pinchStart.merge(pinchMove).merge(pinchEnd);\n        let pinchScale = Bacon.combineAsArray<any, any>(this.scale, pinch)\n            .withStateMachine(null, (s0: number | null, ev: Bacon.Event<any>) => {\n                if (ev.hasValue()) {\n                    const [s, jqEvent] = <[number, any]>ev.value();\n                    const domEvent = jqEvent.originalEvent;\n                    const hmEvent  = domEvent.gesture;\n                    switch (domEvent.type) {\n                    case 'pinchstart':\n                        return [s, []];\n\n                    case 'pinch':\n                        if (s0) {\n                            const min  = Number(this.scaleSlider.min);\n                            const max  = Number(this.scaleSlider.max);\n                            const step = Number(this.scaleSlider.step);\n                            const ds   = hmEvent.scale;\n                            const s1   = s0 * ds;\n                            const s1q  = Math.round(s1 * (1 / step)) / (1 / step); // quantized\n                            const s1qr = Math.min(Math.max(s1q, min), max); // restricted\n                            return [s0, [new Bacon.Next(s1qr)]];\n                        }\n                    }\n                }\n                return [null, []];\n            })\n            .map((s: number) => {\n                return () => s;\n            });\n        atlas.scaleChanges.plug(pinchScale);\n\n        /* Users can drag the atlas to scroll it. */\n        let panStart = $(this.canvas).asEventStream('panstart').doAction('.preventDefault');\n        let panMove  = $(this.canvas).asEventStream('pan').doAction('.preventDefault').debounceImmediate(10);\n        let panEnd   = $(this.canvas).asEventStream('panend pancancel').doAction('.preventDefault');\n        let pan      = panStart.merge(panMove).merge(panEnd);\n        let centerChanges = Bacon.combineAsArray<any, any>(this.scale, this.center, pan)\n            .withStateMachine(null, (c0: Point | null, ev: Bacon.Event<any>) => {\n                if (ev.hasValue()) {\n                    let [scale, c, jqEvent] = <[number, Point, any]>ev.value();\n                    let domEvent = jqEvent.originalEvent;\n                    let hmEvent  = domEvent.gesture;\n                    switch (domEvent.type) {\n                    case 'panstart':\n                        return [c, []];\n\n                    case 'pan':\n                        if (c0) {\n                            let ax = this.canvas.width  / $(this.canvas).width();\n                            let az = this.canvas.height / $(this.canvas).height();\n                            let dx = -hmEvent.deltaX * ax / scale;\n                            let dz = -hmEvent.deltaY * az / scale;\n                            let c1 = c0.offset(dx, dz).round();\n                            return [c0, [new Bacon.Next(c1)]];\n                        }\n                    }\n                }\n                return [null, []];\n            })\n            .map((c: Point) => {\n                return () => c;\n            });\n        atlas.centerChanges.plug(centerChanges);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./app/view/atlas.ts","import $ = require('jquery');\nimport Bacon = require('baconjs');\nimport Point from 'slime-finder/point';\nimport Chunk from 'slime-finder/chunk';\nimport CoordsModel from '../model/coords';\n\nexport default class CoordsView {\n    protected readonly changes: Bacon.EventStream<any, (p: Point) => Point>;\n    protected readonly chunk: Bacon.Observable<any, Chunk>;\n\n    constructor(coords: CoordsModel) {\n        /* Whenever users directly change the value of input forms its\n         * change should be propagated to the coords.changed bus.\n         */\n        this.changes = $('#position-x, #position-z').asEventStream('input').map(() => {\n            return () => new Point(\n                Number($('#position-x').val()),\n                Number($('#position-z').val()));\n        });\n        coords.changes.plug(this.changes);\n\n        /* The value of coords.prop property should be shown in the\n         * input forms.\n         */\n        coords.prop.onValue((p: Point) => {\n            $('#position-x').val(p.x);\n            $('#position-z').val(p.z);\n        });\n\n        /* And the chunk position on the screen should also depend on\n         * the coords.prop property.\n         */\n        this.chunk = coords.prop.map((p: Point) => {\n            return new Chunk(p);\n        });\n        this.chunk.onValue((c) => {\n            $('#chunk-from-x').text(c.origin.x);\n            $('#chunk-from-z').text(c.origin.z);\n\n            $('#chunk-to-x').text(c.origin.x + 15);\n            $('#chunk-to-z').text(c.origin.z + 15);\n\n            if (c.isSlimy) {\n                $('#chunk-is-slimy').fadeIn(50);\n            }\n            else {\n                $('#chunk-is-slimy').fadeOut(50);\n            }\n        });\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./app/view/coords.ts","exports = module.exports = require(\"../node_modules/css-loader/lib/css-base.js\")(undefined);\n// imports\n\n\n// module\nexports.push([module.id, \"h1{padding:0 0 0 1em}input[type=range][orient=vertical]{writing-mode:bt-lr;-webkit-appearance:slider-vertical}\", \"\"]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/css-loader?minimize!./~/sass-loader/lib/loader.js!./scss/app.scss\n// module id = 20\n// module chunks = 0","exports = module.exports = require(\"../node_modules/css-loader/lib/css-base.js\")(undefined);\n// imports\n\n\n// module\nexports.push([module.id, \".atlas-container{position:relative}.atlas-container .atlas-scale-container{position:absolute;padding:0 5px;margin:1em}.atlas-container .atlas-scale-container input.atlas-scale{width:8px;height:125px;max-height:80%;margin:.2em auto;-webkit-transform:rotateX(180deg);-moz-transform:rotateX(180deg);-ms-transform:rotateX(180deg);-o-transform:rotateX(180deg);transform:rotateX(180deg)}.atlas-container canvas.atlas{width:100%;height:auto;cursor:move}\", \"\"]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/css-loader?minimize!./~/sass-loader/lib/loader.js!./scss/atlas.scss\n// module id = 21\n// module chunks = 0","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../node_modules/css-loader/index.js?minimize!../node_modules/sass-loader/lib/loader.js!./atlas.scss\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// add the styles to the DOM\nvar update = require(\"!../node_modules/style-loader/addStyles.js\")(content, {});\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!../node_modules/css-loader/index.js?minimize!../node_modules/sass-loader/lib/loader.js!./atlas.scss\", function() {\n\t\t\tvar newContent = require(\"!!../node_modules/css-loader/index.js?minimize!../node_modules/sass-loader/lib/loader.js!./atlas.scss\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./scss/atlas.scss\n// module id = 44\n// module chunks = 0","import 'bootstrap-loader';\nimport '../scss/app.scss';\nimport AtlasModel  from './model/atlas';\nimport CoordsModel from './model/coords';\nimport AtlasView   from './view/atlas';\nimport CoordsView  from './view/coords';\nimport Point       from 'slime-finder/point';\nimport $ = require('jquery');\n\n$(() => {\n    /* If the URI hash contains coordinates, we use it as the initial\n     * value.\n     */\n    const initialCoords = (() => {\n        let m = window.location.hash.match(/^#([-0-9.]+),([-0-9.]+)$/);\n        if (m) {\n            return new Point(Number(m[1]), Number(m[2]));\n        }\n        else {\n            return new Point(0, 0);\n        }\n    })();\n\n    /* If the localStorage contains scale, we use it as the initial\n     * value.\n     */\n    const initialScale  = (() => {\n        let sc = localStorage.getItem('atlas.scale');\n        return sc == null ? 4.0 : Number(sc);\n    })();\n\n    const coordsModel   = new CoordsModel(initialCoords);\n    const coordsView    = new CoordsView(coordsModel);\n\n    const atlasModel    = new AtlasModel(coordsModel, initialScale);\n    const atlasView     = new AtlasView(atlasModel);\n\n    /* Changes in coordsModel.prop updates the URI hash.\n     */\n    coordsModel.prop.onValue((p: Point) => {\n        window.history.replaceState('', '', `#${p.x},${p.z}`);\n    });\n\n    /* Changes in atlasModel.scale updates the localStorage.\n     */\n    atlasModel.scale.onValue((sc: number) => {\n        localStorage.setItem('atlas.scale', String(sc));\n    });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./app/slime-finder.ts","/* Lower 32-bits of multiplication of two uint32 values a * b.\n */\nexport function umul32_lo(a: number, b: number): number {\n    let a00 = a & 0xFFFF;\n    let a16 = a >>> 16;\n    let b00 = b & 0xFFFF;\n    let b16 = b >>> 16;\n\n    let c00 = a00 * b00;\n    let c16 = c00 >>> 16;\n\n    c16 += a16 * b00;\n    c16 &= 0xFFFF;\n    c16 += a00 * b16;\n\n    let lo = c00 & 0xFFFF;\n    let hi = c16 & 0xFFFF;\n\n    return ((hi << 16) | lo) >>> 0;\n}\n\n/* Higher 32-bits of multiplication of two uint32 values a * b.\n */\nexport function umul32_hi(a: number, b: number): number {\n    let a00 = a & 0xFFFF;\n    let a16 = a >>> 16;\n    let b00 = b & 0xFFFF;\n    let b16 = b >>> 16;\n\n    let c00 = a00 * b00;\n\n    let c16 = c00 >>> 16;\n    c16 += a00 * b16;\n    let c32 = c16 >>> 16;\n    c16 &= 0xFFFF;\n    c16 += a16 * b00;\n\n    c32 += c16 >>> 16;\n    let c48 = c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a16 * b16;\n    c48 += c32 >>> 16;\n\n    let lo = c32 & 0xFFFF;\n    let hi = c48 & 0xFFFF;\n\n    return ((hi << 16) | lo) >>> 0;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./lib/umul32.ts","import LRU = require('lru-cache');\nimport MersenneTwister = require('mersenne-twister');\nimport Point from 'slime-finder/point';\nimport { umul32_lo, umul32_hi } from 'slime-finder/umul32';\n\n/* Cache of the actual chunk objects.\n */\nconst cache = LRU<_Chunk>(5000);\n\nexport default class Chunk {\n    /* The actual chunk.\n     */\n    private readonly _chunk: _Chunk;\n\n    /* Construct a Chunk object which contains the given point. */\n    constructor(origin: Point) {\n        let o = new Point(\n            Math.floor(origin.x / 16) * 16,\n            Math.floor(origin.z / 16) * 16);\n        let k = `${o.x},${o.z}`;\n        let c = cache.get(k);\n        if (c) {\n            this._chunk = c;\n        }\n        else {\n            this._chunk = new _Chunk(o);\n            cache.set(k, this._chunk);\n        }\n    }\n\n    /* Origin of the chunk (normalized, i.e. always multiple of 16 */\n    get origin(): Point {\n        return this._chunk.origin;\n    }\n\n    /* Return true if it is a slime chunk. */\n    get isSlimy(): boolean {\n        return this._chunk.isSlimy;\n    }\n\n    /* Return a new chunk offset by given number of chunks */\n    offset(x: number, z: number): Chunk {\n        return new Chunk(new Point(\n            this.origin.x + x * 16,\n            this.origin.z + z * 16));\n    }\n}\n\nclass _Chunk {\n    /* Origin of the chunk (normalized, i.e. always multiple of 16 */\n    readonly origin: Point;\n\n    /* Cached result of the sliminess check */\n    private _isSlimy: boolean | null;\n\n    /* Construct a Chunk object which contains the given point. */\n    constructor(origin: Point) {\n        this.origin   = origin;\n        this._isSlimy = null;\n    }\n\n    /* Return true if it is a slime chunk. */\n    get isSlimy(): boolean {\n        /*! MCPE slime-chunk checker; reverse engineered by @protolambda and @jocopa3\n         * Ported by PHO from Java code:\n         *   https://gist.github.com/protolambda/00b85bf34a75fd8176342b1ad28bfccc\n         */\n        if (this._isSlimy == null) {\n            let x_uint    = (this.origin.x / 16) >>> 0;\n            let z_uint    = (this.origin.z / 16) >>> 0;\n            let seed      = umul32_lo(x_uint, 0x1f1f1f1f) ^ z_uint;\n            let mt        = new MersenneTwister(seed);\n            let n         = mt.random_int();\n            let m         = 0xcccccccd;\n            let hi        = umul32_hi(n, m);\n            let hi_shift3 = hi >>> 3;\n            let res       = ((((hi_shift3 + (hi_shift3 * 4)) & 0xffffffff) * 2) & 0xffffffff) >>> 0;\n            this._isSlimy = (n == res);\n        }\n        return this._isSlimy;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./lib/chunk.ts"],"sourceRoot":""}